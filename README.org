* Jena Fuseki HDT

 The idea here is create a more agile fuseki/jena system that can be used to
 create the file based inputs for our cloud computing environment.  So multiple
 versions can be started up at any given time, and used to poppulate the cloud
 based services.

 We are trying to use the standard [[https://jena.apache.org/documentation/fuseki2/fuseki-layout.html][fuseki layout]], FUSEKI_HOME and FUSEKI_BASE.
 This allows us to have the configuration files in the image.  The databases are
 not in their default location, but are instead at: /var/lib/fuseki/databases.
 The fuseki layout file identifies that we need remove the ${FUSEKI_BASE}/system
 and ${FUSEKI_BASE}/system_files to reset the server.

 The Dockerfile combines the Apache Jena Project, both jena and fuseki, along
 with update the the ~/fuseki/extra~ area to support hdt-jena, and also a JS
 engine.  The fuseki instance actually copies existing jars from the apache jena
 repo, and adds them to the image.

 Some good review of all of Jena's tools are found in this [[https://www.bobdc.com/blog/jenagems/][blog post]].


** Javascript functions

This image includes a javascript engine, and some example functions, see
[[file:./fuseki/sparql-js-functions.js]] for the functions added.

** Running the image
*** Adding an HDT file as a persistent graph

If you'd like to add an HDT file as a persistent read-only graph, then you need
to both load the data, and upload a configuration file for your container.

If you have a persistent disk image `fuseki-data`, then you can copy an HDT file
directly to that image.

#+begin_src bash
docker cp example_graph.hdt fuseki-data:/fuseki/databases
#+end_src

An alternative would be to create a second volume that holds only the hdt files.
You might want to do this if you'd like to share that volume with other docker
containers.   This is okay, as these files are read-only..

#+begin_src bash
cat <<CONFIG >> example_config.ttl
@prefix :      <#> .
@prefix ja:    <http://jena.hpl.hp.com/2005/11/Assembler#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix fuseki: <http://jena.apache.org/fuseki#> .
@prefix hdt: <http://www.rdfhdt.org/fuseki#> .

# HDT Classes
hdt:HDTGraph rdfs:subClassOf ja:Graph .

:example_service a fuseki:Service ;
    rdfs:label                      "Example Service" ;
    fuseki:name                     "example" ;
    fuseki:serviceQuery             "query", "sparql" ;
    fuseki:serviceReadGraphStore    "get" ;
    fuseki:dataset                   [ a ja:RDFDataset ;
                                       ja:defaultGraph :example_graph ] ;
    .

:example_graph a hdt:HDTGraph;
    rdfs:label "Example HDT Graph" ;
    hdt:fileName "/fuseki/databases/example_graph.hdt" ;

        # Optional: Keep the HDT and index in memory at all times.
        # Uses more memory but it is potentially faster because avoids IO.
        # hdt:keepInMemory "true" ;
    .
CONFIG;
# Then copy this to your image data
docker cp example_config.ttl fuseki-data:/fuseki/configurations
#+end_src

After running `docker restart fuseki` in this case, you will now have a
read-only additional dataset.

*** Environmental Variables
   The following environmental variables are used.  These are primarily used in
   the config.ttl.tmpl file.  The current image reloads the config.tll.tmpl into
   the /fuseki/config.ttl file on every startup.  This is to allow us to see
   changes affected in the .env file.  I suppose, we could instead do this on
   every *new* container, not on every startup.

   For now, however, that means you need to change the config.ttl.tmpl version
   if you want to change config.ttl for testing.

   - ~${FUSEKI_TIMEOUT_FIRST:-30000}~ How long to wait (in ms) for first output

   - ~${FUSEKI_TIMEOUT_REST:-120000}~ When to stop delivering data

   - ~${FUSEKI_ARQ_LOGEXEC:-info}~ Log Level info,fine or full See [[https://jena.apache.org/documentation/fuseki2/fuseki-logging.html][Logging]]

   - ~${FUSEKI_PASSWORD:-testing123}~ Fuseke Admin password

   - ~${FUSEKI_BASE}~ Fuseki base (set to ucd.process in our setup)

*** Extended Example

The [example](./example) directory contains a more complete example that shows
how this image can be used, it includes two examples, using docker-compose files
to manage the data and the container.


** Build information
   The openjdk stage of the build was inspired by
https://github.com/EKGF/debian-openjdk-python3-awscli which I found primarily
because they have sparql style tools as well.

The above project references a comparison of Alpine to Debian for this image due
to these two articles:
- https://pythonspeed.com/articles/base-image-python-docker-images/
- https://pythonspeed.com/articles/alpine-docker-python/
